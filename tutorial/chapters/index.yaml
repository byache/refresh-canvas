order: 0

library: |
  var x = 25;
  var y = 250;
  var dx = 1.5;
  var dy = -4;
  var ctx;
  var WIDTH;
  var HEIGHT;
  var paddlex;
  var paddleh = 10;
  var paddlew = 75;
  var rightDown = false;
  var leftDown = false;
  var canvasMinX = 0;
  var canvasMaxX = 0;
  var intervalId = 0;
  var bricks;
  var NROWS = 5;
  var NCOLS = 5;
  var BRICKWIDTH;
  var BRICKHEIGHT = 15;
  var PADDING = 1;
  
  function init() {
    ctx = $('#canvas')[0].getContext("2d");
    WIDTH = $("#canvas").width();
    HEIGHT = $("#canvas").height();
    BRICKWIDTH = (WIDTH/NCOLS) - 1;
    paddlex = WIDTH / 2;
    canvasMinX = $("#canvas").offset().left;
    canvasMaxX = canvasMinX + WIDTH;
    intervalId = setInterval(draw, 10);
    return intervalId;
  }
  
  function circle(x,y,r) {
    ctx.beginPath();
    ctx.arc(x, y, r, 0, Math.PI*2, true);
    ctx.closePath();
    ctx.fill();
  }
  
  function rect(x,y,w,h) {
    ctx.beginPath();
    ctx.rect(x,y,w,h);
    ctx.closePath();
    ctx.fill();
  }
  
  function clear() {
    ctx.clearRect(0, 0, WIDTH, HEIGHT);
    rect(0,0,WIDTH,HEIGHT);
  }
  
  function onKeyDown(evt) {
    if (evt.keyCode == 39) rightDown = true;
    else if (evt.keyCode == 37) leftDown = true;
  }
  
  function onKeyUp(evt) {
    if (evt.keyCode == 39) rightDown = false;
    else if (evt.keyCode == 37) leftDown = false;
  }
  
  $(document).keydown(onKeyDown);
  $(document).keyup(onKeyUp);
  
  function onMouseMove(evt) {
    if (evt.pageX &gt; canvasMinX &amp;&amp; evt.pageX &lt; canvasMaxX) {
      paddlex = Math.max(evt.pageX - canvasMinX - (paddlew/2), 0);
      paddlex = Math.min(WIDTH - paddlew, paddlex);
    }
  }
  
  $(document).mousemove(onMouseMove);
  
  function initbricks() {
      bricks = new Array(NROWS);
      for (i=0; i &lt; NROWS; i++) {
          bricks[i] = new Array(NCOLS);
          for (j=0; j &lt; NCOLS; j++) {
              bricks[i][j] = 1;
          }
      }
  }
  
  function drawbricks() {
    for (i=0; i &lt; NROWS; i++) {
      ctx.fillStyle = rowcolors[i];
      for (j=0; j &lt; NCOLS; j++) {
        if (bricks[i][j] == 1) {
          rect((j * (BRICKWIDTH + PADDING)) + PADDING, 
               (i * (BRICKHEIGHT + PADDING)) + PADDING,
               BRICKWIDTH, BRICKHEIGHT);
        }
      }
    }
  }
  
  var ballr = 10;
  var rowcolors = ["#FF1C0A", "#FFFD0A", "#00A308", "#0008DB", "#EB0093"];
  var paddlecolor = "#FFFFFF";
  var ballcolor = "#FFFFFF";
  var backcolor = "#000000";
 
code: |
  function draw() {
    ctx.fillStyle = backcolor;
    clear();
    ctx.fillStyle = ballcolor;
    circle(x, y, ballr);
  
    if (rightDown) paddlex += 5;
    else if (leftDown) paddlex -= 5;
    ctx.fillStyle = paddlecolor;
    rect(paddlex, HEIGHT-paddleh, paddlew, paddleh);
  
    drawbricks();
  
    //want to learn about real collision detection? go read
    // http://www.metanetsoftware.com/technique/tutorialA.html
    rowheight = BRICKHEIGHT + PADDING;
    colwidth = BRICKWIDTH + PADDING;
    row = Math.floor(y/rowheight);
    col = Math.floor(x/colwidth);
    //reverse the ball and mark the brick as broken
    if (y &lt; NROWS * rowheight &amp;&amp; row &gt;= 0 &amp;&amp; col &gt;= 0 &amp;&amp; bricks[row][col] == 1) {
      dy = -dy;
      bricks[row][col] = 0;
    }
   
    if (x + dx + ballr &gt; WIDTH || x + dx - ballr &lt; 0)
      dx = -dx;
  
    if (y + dy - ballr &lt; 0)
      dy = -dy;
    else if (y + dy + ballr &gt; HEIGHT - paddleh) {
      if (x &gt; paddlex &amp;&amp; x &lt; paddlex + paddlew) {
        //move the ball differently based on where it hit the paddle
        dx = 8 * ((x-(paddlex+paddlew/2))/paddlew);
        dy = -dy;
      }
      else if (y + dy + ballr &gt; HEIGHT)
        clearInterval(intervalId);
    }
   
    x += dx;
    y += dy;
  }
  
  init();
  initbricks();

explain_before: |
  Nous allons travailler à plusieurs reprises cette année sur la conception de mini jeux vidéos.
  <p> Vous pouvez tester à gauche un exemple de jeu de "casse-briques" (cliquez sur le bouton "Exécuter"...). Ce jeu est déjà assez compliqué à programmer : nous n'en ferons sans doute pas d'aussi élaborés, mais nous verrons en plusieurs étapes quelques grands principes de sa programmation.
  <p> Pour cela, nous utiliserons plusieurs notions au programme de mathématique en seconde, au fur et à mesure de l'avancement du travail dans l'année (fonctions, coordonnées, intervalles, vecteurs, fonctions du second degré). Nous découvrirons également quelques notions d'"algorithmique".
  <p> Cette page internet est optimisée pour les navigateurs Firefox, Safari, Opera mais pas Internet Explorer. Elle est conçue pour vous éviter tous les tracas "techniques" qu'on rencontre en général lorsqu'on fait de la programmation. 
  <p> Vous pouvez voir ci-dessous un petit extrait du code informatique du jeu de gauche. Si on le modifie et qu'on re-clique sur le bouton "Exécuter", le jeu est modifié. (Par exemple, si on enlève une lettre du mot "function", le jeu ne marche plus !)
  <p> Le reste du code peut être vu sous l'onglet "Reste du code", mais vous n'aurez en général pas besoin d'y intervenir.

name: 'index'

title: 'Introduction'
